<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
		<![CDATA[
			import dataclasses.ConceptItem;
			import mx.collections.ArrayCollection;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;

			private var g: Graph = new Graph();
			private var prevItem: Item;
			private var itemCount: int = 0;
			
			private function init(): void
			{
				s.dataProvider = g;
			}

			private function newItem(concept:Object, extraRepulsion:Number = 1.0): void {
				var item: ConceptItem = new ConceptItem(new Number(itemCount++).toString(),
														concept["attr"],
														concept["obj"], extraRepulsion);
				g.add(item);
				prevItem = item;
				//s.dataProvider = g;
			}	
			
			private function linkItems(fromId: String, toId: String): void {
				var fromItem: Item = g.find(fromId);
				var toItem: Item = g.find(toId);
				g.link(fromItem, toItem);
				//s.dataProvider = g;
			}		
			
			private function unlinkItems(fromId: String, toId: String): void {
				var fromItem: Item = g.find(fromId);
				var toItem: Item = g.find(toId);
				g.unlink(fromItem, toItem);
				s.dataProvider = g;
			}
			
			private function updateConcepts(allConcepts:Array, concepts:Array, data:Object): Array
			{
				var newConcepts:Array = concepts.concat();
				var found:Boolean = false;
				var dataObj:Array = data["obj"] as Array;
				var dataAttr:Array = data["attr"] as Array;
				for each (var c:Object in allConcepts.concat(concepts))
				{
					var attrArr:Array = c["attr"] as Array;
					if (attrArr.length != dataAttr.length)
					{
						continue;
					}
					if (attrArr.every(function (a:String, index:int, arr:Array):Boolean
									  {
										  return a == dataAttr[index];
									  }))
					{
						found = true;
						var newObjects:Object = {};
						for each (var obj:String in (c["obj"] as Array))
						{
							newObjects[obj] = 0;
						}
						for each (obj in dataObj)
						{
							newObjects[obj] = 0;
						}
						var newObjectsArr:Array = new Array();
						for (obj in newObjects)
						{
							newObjectsArr.push(obj);
						}
						c["obj"] = newObjectsArr;
						var id:String = c["id"];
						var oldParents:Array = c["parents"] as Array;
						c["parents"] = oldParents.concat(data["parents"] as Array);
						for each (var parent:String in data["parents"] as Array)
						{
							linkItems(id, parent);
						}
						break;
					}
				}
				if (!found)
				{
					allConcepts.push(data);
					newConcepts.push(data);
					newItem(data);
					linkItems(data["id"], (data["parents"] as Array)[0]);
				}
				
				return newConcepts;
			}
			
			public function setContext(objects:Array, attributes:Array, data:ArrayCollection): void
			{
				var firstObjects:Array = new Array();
				var endConcepts:Array = new Array();
				for (var index:String in objects) firstObjects.push(index);
				var firstConcept:Object = {obj:firstObjects, attr:[], id:"0", parents:[]};
				var prevConcepts:Array = [firstConcept];
				var allConcepts:Array = prevConcepts.concat();
				var newConcept:Boolean = true;
				newItem(firstConcept, 5.0);
				while (newConcept)
				{
					newConcept=false;
					var newConcepts:Array = new Array();
					for (var conceptIndex:Object in prevConcepts)
					{
						var concept:Object = prevConcepts[conceptIndex];
						var endConcept:Boolean = true;
						for each (var attribute:String in attributes)
						{
							var attr:Array = concept["attr"] as Array;
							if (attr.indexOf(attribute) != -1)
							{
								continue;
							}
							var newObjects:Array = new Array();
							var conceptObjs:Array = (concept["obj"] as Array);
							for each (var o:String in conceptObjs)
							{
								if (data[o][attribute] == true)
								{
									newObjects.push(o);
								}
							}
							if (newObjects.length == 0)
							{
								continue;
							}
							var oldAttrs:Array = (concept["attr"] as Array);
							var newAttr:Array = oldAttrs.concat(attribute);
							for each (var extraAttr:String in attributes)
							{
								if (newAttr.indexOf(extraAttr) != -1)
								{
									continue;
								}
								if (newObjects.every(
										function(o:String, i:int, a:Array): Boolean {
											return data[o][extraAttr] == true;
										}))
									{
										newAttr.push(extraAttr);
									}
							}
							newAttr = newAttr.sort();
							newConcept = true;
							endConcept = false;
							var updateData:Object = {obj:newObjects, 
													 attr:newAttr,
													 parents:[concept["id"]],
													 id:itemCount.toString()};
							newConcepts = updateConcepts(allConcepts, newConcepts, updateData);
						}
						if (endConcept)
						{
							endConcepts.push(concept);
						}
					}
					prevConcepts = newConcepts;
				}
				newItem({obj:[], attr:attributes}, 5.0);
				for each (concept in endConcepts)
				{
					linkItems(concept["id"], (itemCount-1).toString());
				}
			}
		]]>
	</mx:Script>
	<mx:Grid width="100%">
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Item width"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="widthSlider" value="80" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Item height"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="heightSlider" value="91" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Repulsion"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="repulsionSlider" value="1.3" minimum="0.02" maximum="3.5" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Font Size"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="fontSizeSlider" value="10" minimum="8" maximum="70" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>

	<fc:SpringGraph id="s" backgroundColor="#777777" width="100%" height="100%"
		lineColor="#6666ff" repulsionFactor="{repulsionSlider.value}"
		creationComplete="init()">
		<fc:itemRenderer>
			<mx:Component>
				<mx:VBox backgroundAlpha="0.3" backgroundColor="0x444444" height="{outerDocument.heightSlider.value}"
					 verticalScrollPolicy="off" horizontalScrollPolicy="off"
					paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
					<mx:TextArea text="{data.attributes}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
						textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
						verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
					<mx:TextArea text="{data.objects}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
						textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
						verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
				</mx:VBox>
			</mx:Component>
		</fc:itemRenderer>
	</fc:SpringGraph>	
</mx:VBox>
