<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc" horizontalScrollPolicy="auto">
	<mx:Script>
		<![CDATA[
			import renderers.ConceptEdgeRenderer;
			import com.adobe.flex.extras.controls.springgraph.IEdgeRenderer;
			import logic.Concept;
			import com.adobe.flex.extras.controls.springgraph.GraphEdge;
			import logic.NaiveConceptProcessor;
			import logic.IConceptProcessor;
			import mx.collections.ArrayCollection;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;

			private var _g: Graph = new Graph();
			private var _conceptProcessor: IConceptProcessor;
			private var _concepts: Array = new Array();
			private var _objects: Array = new Array();
			private var _attributes: Array = new Array();
			
			public var focusedItem:Item;

			private function init(): void
			{
				s.dataProvider = _g;
				s.edgeRenderer = new ConceptEdgeRenderer();
				if (_concepts.length > 0)
				{
					setLists(_concepts[0]);
				}
				//adds event for mouse wheel scrolling
				systemManager.addEventListener(MouseEvent.MOUSE_WHEEL, doMouseWheel);   

			}
			
			//what's happening at scrolling
			private function doMouseWheel(evt:MouseEvent):void {
				if (verticalRepulsionSlider.value + evt.delta/13 < verticalRepulsionSlider.maximum &&
					verticalRepulsionSlider.value + evt.delta/13 > verticalRepulsionSlider.minimum &&
					repulsionSlider.value + evt.delta/13 < repulsionSlider.maximum &&
					repulsionSlider.value + evt.delta/13 > repulsionSlider.minimum) {
                		verticalRepulsionSlider.value += evt.delta/13;
                		repulsionSlider.value += evt.delta/13;
    			} else {
                		if (evt.delta>0) {
                			if (verticalRepulsionSlider.value + evt.delta/13 < verticalRepulsionSlider.maximum)
                				verticalRepulsionSlider.value += evt.delta/13;
                			else verticalRepulsionSlider.value = verticalRepulsionSlider.maximum;
                			if (repulsionSlider.value + evt.delta/13 < repulsionSlider.maximum)
                				repulsionSlider.value += evt.delta/13;
                			else repulsionSlider.value = repulsionSlider.maximum;
                		}
                		if (evt.delta<0) {
                			if (verticalRepulsionSlider.value + evt.delta/13 > verticalRepulsionSlider.minimum)
                				verticalRepulsionSlider.value += evt.delta/13;
                			else verticalRepulsionSlider.value = verticalRepulsionSlider.minimum;
                			if (repulsionSlider.value + evt.delta/13 > repulsionSlider.minimum)
                				repulsionSlider.value += evt.delta/13;
                			else repulsionSlider.value = repulsionSlider.minimum;
                		}
    			}
            }

			private function setLists(concept:Concept): void
			{
				objectsList.dataProvider = 	concept.objects.map(
					function (item:*, index:int, arr:Array):Object {
						return _objects[item];						
					});
				attributesList.dataProvider = concept.attributes.map(
					function (item:*, index:int, arr:Array):Object {
						return _attributes[item];						
					});;
			}
			
			private function resetGraph(): void
			{
				if (s != null) {
					s.empty(); 
					s.dataProvider = _g;
					if (_concepts.length > 0) {
						setActiveItem(_g.nodes[0].id);
					}
				}
			}
			
			public function setGraph(objects:Array, attributes:Array, graph:Graph): void
			{
				_objects = objects;
				_attributes = attributes;
				_g = graph;
			}
			
			public function setConcepts(concepts:Array): void
			{
				_concepts = concepts;
				resetGraph();
			}
			
			public function getConcepts(): Array
			{
				return _concepts;
			}
			
			public function setContext(objects:Array, attributes:Array, data:ArrayCollection): void
			{
				_objects = objects;
				_attributes = attributes;
				_conceptProcessor = new NaiveConceptProcessor(objects, attributes);
				_g = _conceptProcessor.computeConcept(data);
				_concepts = _conceptProcessor.getConceptList();
				resetGraph();
			}
			
			public function getGraph(): Graph
			{
				return _g;
			}
			
			public function getGraphRepresentation(): String
			{
				var out:ByteArray = new ByteArray();
				for each (var edge:Array in _g.edges)
				{
					var item1:Item, item2:Item;
					if (edge[0].id == _g.getLinkData(edge[0], edge[1])) {
						item1 = edge[0];
						item2 = edge[1];
					} else {
						item1 = edge[1];
						item2 = edge[0];
					}
					out.writeUTFBytes(String(item1.id) + " " + String(item2.id) + "\n"); 
				}
				return out.toString();
			}
			
			public function getConceptRepresentation(): String
			{
				var out:ByteArray = new ByteArray();
				for (var conceptId:String in _concepts)
				{
					out.writeUTFBytes(conceptId + "\n");
					out.writeUTFBytes(_concepts[conceptId].objects.join(",") + "\n");
					out.writeUTFBytes(_concepts[conceptId].attributes.join(",") + "\n");
					out.writeUTFBytes(((_concepts[conceptId].attachedObject != null) ? _concepts[conceptId].attachedObject : "") + "\n");
					out.writeUTFBytes(((_concepts[conceptId].attachedAttribute != null) ? _concepts[conceptId].attachedAttribute : "") + "\n");
				}
				return out.toString();
			}
			
			public function setActiveItem(id: String): void
			{
				var concept:Concept = _concepts[id];
				if (concept != null)
				{
					setLists(concept);
				}
			}
		]]>
	</mx:Script>
	<mx:Grid width="100%" horizontalScrollPolicy="auto">
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Maximum edge distance"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="maxDistanceFromCurrent" value="6" minimum="1" maximum="27" 
        					liveDragging="true" snapInterval="1" change="s.refresh()" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Item width"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="widthSlider" value="97" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Item height"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="heightSlider" value="52" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Font Size"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="fontSizeSlider" value="11.5" minimum="8" maximum="70" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Visible concepts limit"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="maxVisible" snapInterval="1" value="20" minimum="7" maximum="170" 
        					liveDragging="true" change="s.refresh()" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Skip"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:NumericStepper id="skipCount" minimum="0" maximum="1000" />
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Horizontal repulsion"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="repulsionSlider" value="1.37" minimum="0.02" maximum="4.5" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Vertical repulsion"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="verticalRepulsionSlider" value="1.37" minimum="0.7" maximum="4" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>

	<mx:HDividedBox width="100%" height="100%" dividerAlpha="1.0" dividerColor="#FFFFFF"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:VBox height="100%" width="140" minWidth="0" backgroundColor="#909090"
				 paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"
				 verticalScrollPolicy="auto" horizontalScrollPolicy="auto">
			<mx:Label text="Attributes" />
			<mx:List id="attributesList" width="100%" height="100%">
			</mx:List>
			<mx:Label text="Objects" />
			<mx:List id="objectsList" width="100%" height="100%">
			</mx:List>
		</mx:VBox>
		<mx:VBox id="latticeContainer" verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" height="100%">
			<fc:Roamer id="s" width="100%" height="100%" verticalScrollPolicy="auto" horizontalScrollPolicy="auto"
				lineColor="#8888ff" 
				repulsionFactor="{repulsionSlider.value}"
				verticalRepulsionFactor="{verticalRepulsionSlider.value}"
				itemLimit="{maxVisible.value}"
				skip="{skipCount.value}"
				maxDistanceFromCurrent="{maxDistanceFromCurrent.value}"
				nodeHeight="{heightSlider.value}"
				creationComplete="init()">
		        <fc:removeItemEffect>
		            <mx:Fade alphaFrom="1" alphaTo="0" duration="1000"/>                
		        </fc:removeItemEffect>
		        <fc:addItemEffect>
		            <mx:Fade alphaFrom="0" alphaTo="1" duration="1000"/>
		        </fc:addItemEffect>
		  		<fc:itemRenderer>
					<mx:Component>
						<mx:VBox backgroundAlpha="0.3" backgroundColor="0x444444" height="{outerDocument.heightSlider.value}"
							 filters="{calcFilters(outerDocument.s.currentItem, data as Item)}"
							 paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
							<mx:Script>
								<![CDATA[
									import mx.core.UIComponent;
									import com.adobe.flex.extras.controls.springgraph.Item;
									public function doubleClick(event:Event): void
									{
										outerDocument.s.currentItem = event.currentTarget.data;
										outerDocument.setActiveItem(event.currentTarget.data.id);
									}
	
									public function mouseOver(event:Event): void
									{
										outerDocument.setActiveItem(event.currentTarget.data.id);
										outerDocument.focusedItem = event.currentTarget.data;
										(event.currentTarget as UIComponent).filters = [new GlowFilter(0xFF3300, 0.5, 8, 8, 2, 1)]
									}
									
									public function mouseOut(event:Event): void
									{
										outerDocument.focusedItem = null;
										(event.currentTarget as UIComponent).filters = calcFilters(outerDocument.s.currentItem, data as Item);
									}
	
									private function calcFilters(currentItem: Item, item: Item): Array {
						                if(outerDocument.s.currentItem == item) {
						                    return [new GlowFilter(0xFFFF00, 0.5, 8, 8, 2, 1)];
						                } else if(outerDocument.s.hasBeenCurrentItem(item)) {
						                    return [new GlowFilter(0x0000FF, 0.3, 6, 6, 2, 1)];
						                } else {
						                    return null;
						                }
						            }
								]]>
							</mx:Script>
							<mx:TextArea selectable="false" text="{data.labelAttribute}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
								textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
								verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
							<mx:TextArea selectable="false" text="{data.labelObject}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
								textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
								verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
						</mx:VBox>
					</mx:Component>
				</fc:itemRenderer>
			</fc:Roamer>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>
