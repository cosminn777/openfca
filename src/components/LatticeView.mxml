<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
		<![CDATA[
			import logic.Concept;
			import com.adobe.flex.extras.controls.springgraph.GraphEdge;
			import logic.NaiveConceptProcessor;
			import logic.AndrewsConceptProcessor;
			import logic.IConceptProcessor;
			import mx.collections.ArrayCollection;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;

			private var _g: Graph = new Graph();
			private var _conceptProcessor: IConceptProcessor;
			private var _concepts: Array;
			
			private function init(): void
			{
				_concepts = new Array();
				s.dataProvider = _g;
			}
			
			public function setGraph(graph:XML): void
			{
				_g = Graph.fromXML(graph, ["n", "e", "f", "t"]);
				if (s != null) {
					s.empty(); 
					s.dataProvider = _g;
				}
			}
			
			public function setConcepts(concepts:XML): void
			{
				_concepts = new Array();
				for each (var concept:XML in concepts.c)
				{
					var id:String = concept.@id;
					var obj:Array = new Array();
					var attr:Array = new Array();
					for each (var a:XML in concept.a)
					{
						attr.push(a[0]);						
					}
					for each (var o:XML in concept.o)
					{
						obj.push(o[0]);						
					}
					var newConcept:Concept = new Concept(obj, attr);
					_concepts[id] = newConcept;
				}
			}
			
			public function getConceptsXML(): XML
			{
				var result:XML = <concepts></concepts>;
				for (var conceptId:String in _concepts)
				{
					var concept:XML = <c></c>;
					concept.@id = conceptId;
					for each (var a:String in _concepts[conceptId].attributes)
					{
						var xmlA:XML = <a></a>;
						xmlA.appendChild(a);
						concept.appendChild(xmlA);
					}					
					for each (var o:String in _concepts[conceptId].objects)
					{
						var xmlO:XML = <o></o>;
						xmlO.appendChild(o);
						concept.appendChild(xmlO);
					}
					result.appendChild(concept);
				}
				return result;
			}
			
			public function setContext(objects:Array, attributes:Array, data:ArrayCollection): void
			{
				_conceptProcessor = new NaiveConceptProcessor();
				_g = _conceptProcessor.computeConcept(objects, attributes, data);
				_concepts = _conceptProcessor.getConceptList();
				if (s != null) {
					s.empty(); 
					s.dataProvider = _g;
				}
			}
			
			public function getGraphXML(): XML
			{
				var graphXML:XML = <graph></graph>;
				for each (var item:Item in _g.nodes)
				{
					graphXML.appendChild(item.data);
				}
				for each (var edge:Array in _g.edges)
				{
					var edgeXML:XML = <e />;
					edgeXML.@f = edge[0].id;
					edgeXML.@t = edge[1].id;
					graphXML.appendChild(edgeXML);
				}
				return graphXML;
			}
			
			public function setActiveItem(id: String): void
			{
				var concept:Concept = _concepts[id];
				if (concept != null)
				{
					objectsTextArea.text = concept.objects.join(", ");
					attributesTextArea.text = concept.attributes.join(", ");
				}
				else
				{
					objectsTextArea.text = attributesTextArea.text = "unavailable";
				}
			}
		]]>
	</mx:Script>
	<mx:Grid width="100%" horizontalScrollPolicy="off">
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Degrees of separation"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="maxDistanceFromCurrent" value="2" minimum="1" maximum="5" 
        					liveDragging="true" snapInterval="1" change="s.refresh()" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Item width"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="widthSlider" value="80" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Item height"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="heightSlider" value="50" minimum="20" maximum="200" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<mx:Label text="Max number visible"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="maxVisible" snapInterval="1" value="50" minimum="20" maximum="150" 
        					liveDragging="true" change="s.refresh()" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Repulsion"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="repulsionSlider" value="1.3" minimum="0.02" maximum="3.5" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
			<mx:GridItem>
				<mx:Label text="Font Size"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:HSlider id="fontSizeSlider" value="10" minimum="8" maximum="70" change="s.refresh()" liveDragging="true" width="100%"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow>
			<mx:GridItem colSpan="6">
				<mx:HBox>
					<mx:Label text="Objects:" />
					<mx:TextInput editable="false" width="100%" id="objectsTextArea" backgroundColor="#777777" color="#CCCCCC" />
					<mx:Label text="Attributes:" />
					<mx:TextInput editable="false" width="100%" id="attributesTextArea" backgroundColor="#777777" color="#CCCCCC" />
				</mx:HBox>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>

	<fc:Roamer id="s" width="100%" height="100%"
		lineColor="#8888ff" repulsionFactor="{repulsionSlider.value}"
		itemLimit="{maxVisible.value}"
		maxDistanceFromCurrent="{maxDistanceFromCurrent.value}"
		creationComplete="init()">
        <fc:removeItemEffect>
            <mx:Fade alphaFrom="1" alphaTo="0" duration="1000"/>                
        </fc:removeItemEffect>
        
        <fc:addItemEffect>
            <mx:Fade alphaFrom="0" alphaTo="1" duration="1000"/>
        </fc:addItemEffect>
  		<fc:itemRenderer>
			<mx:Component>
				<mx:VBox backgroundAlpha="0.3" backgroundColor="0x444444" height="{outerDocument.heightSlider.value}"
					 verticalScrollPolicy="off" horizontalScrollPolicy="off"
					 filters="{calcFilters(outerDocument.s.currentItem, data as Item)}"
					 paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
					<mx:Script>
						<![CDATA[
							import com.adobe.flex.extras.controls.springgraph.Item;
							public function doubleClick(event:Event): void
							{
								outerDocument.s.currentItem = event.currentTarget.data;
								outerDocument.setActiveItem(event.currentTarget.data.id);
							}
							private function calcFilters(currentItem: Item, item: Item): Array {
				                if(outerDocument.s.currentItem == item) {
				                    return [new GlowFilter(0xFFFF00, 0.5, 8, 8, 2, 1)];
				                } else if(outerDocument.s.hasBeenCurrentItem(item)) {
				                    return [new GlowFilter(0x0000FF, 0.3, 6, 6, 2, 1)];
				                } else {
				                    return null;
				                }
				            }
						]]>
					</mx:Script>
					<mx:TextArea selectable="false" text="{data.data.@a}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
						textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
						verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
					<mx:TextArea selectable="false" text="{data.data.@o}" fontSize="{outerDocument.fontSizeSlider.value}" backgroundAlpha="0.2"
						textAlign="center" width="{outerDocument.widthSlider.value}" editable="false" horizontalScrollPolicy="off"
						verticalScrollPolicy="auto" height="100%" minHeight="0"/>					
				</mx:VBox>
			</mx:Component>
		</fc:itemRenderer>
	</fc:Roamer>	
</mx:VBox>
