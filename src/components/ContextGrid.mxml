<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
		 xmlns:components="components.*" 
		 initialize="init()" 
		 horizontalAlign="center">
	<mx:Script>
		<![CDATA[
			import com.adobe.flex.extras.controls.forcelayout.Node;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Roamer;
			import com.adobe.flex.extras.controls.springgraph.SpringGraph;
			
			import components.SavePanel;
			
			import events.NewContextEvent;
			
			import flash.geom.Rectangle;
			import flash.utils.Timer;
			import flash.utils.getTimer;
			
			import logic.AttributeExplorer;
			import logic.Concept;
			import logic.ConceptItem;
			import logic.ImplicationProcessor;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.containers.ControlBar;
			import mx.containers.Panel;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.TextInput;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.ComponentDescriptor;
			import mx.core.UIComponent;
			import mx.effects.Pause;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.graphics.ImageSnapshot;
			import mx.graphics.codec.JPEGEncoder;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.management.Attribute;
			import mx.utils.StringUtil;
			
			private var objects:Array;
			private var attributes:Array;
			
			[Bindable]
			private var rows:ArrayCollection;
			
			private var cols:Array;
			
			private var fileReference:FileReference = new FileReference();

			private function init(): void
			{
				rows = new ArrayCollection();
				cols = new Array();
				objects = new Array();
				attributes = new Array();
				addEventListener("myCustomEvent1",onMyCustomEvent1);
				//addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);
			}
			
			/*public function reportKeyDown(event:KeyboardEvent):void {
				var keyPressed:String = String.fromCharCode(event.charCode);
				if (event.keyCode == Keyboard.ENTER) newContextPanel.createContext();
			}*/
			
			private function initGrid(): void
			{
				if (contable != null)
				{
					contable.columns = cols;
				}
			}
			
			private function showImplications(): void
			{		
				var panel:ImplicationPanel = new ImplicationPanel();
				var implProcessor: ImplicationProcessor = new ImplicationProcessor();
				var kImplClosure: Array = new Array();
				var implications: ArrayCollection = new ArrayCollection();
				var k: int = 1;
				
				var i: int = 0;
				
				while (true)
				{
					if (k == 1)
					{
						 var kImplClosureFirstTemp: Array = implProcessor.FirstClosure(objects, attributes, rows);
						 kImplClosure = new Array();
						 for each (var bFirst: Boolean in kImplClosureFirstTemp)
						 {
						 	kImplClosure.push(bFirst);
						 }
					}
					else
					{
						var kImplClosureNextTemp: Array = implProcessor.NextClosure(kImplClosure, objects, attributes, rows);
						kImplClosure = new Array();
						for each (var bNext: Boolean in kImplClosureNextTemp)
						{
							kImplClosure.push(bNext);
						}
					}
					++k;
									
					// check whether we've reached the end of the possible intents
					for (i = 0; i < kImplClosure.length; ++i)
					{
						if (kImplClosure[i] == false)
						{
							break;
						}
					}
					if (i == kImplClosure.length)
					{
						break; // finished
					}
					
					var bsPremise:Array = implProcessor.sPremise[implProcessor.sPremise.length - 1];
					var bsConclusion:Array = implProcessor.sConclusion[implProcessor.sConclusion.length - 1];
					
					var j: int = 0;
					for (j = 0; j < kImplClosure.length; ++j)
					{
						if (bsPremise[j] != bsConclusion[j])
						{
							break;
						}
					}
					if (j == bsPremise.length) // premise is equal to the conclusion
					{
						// skip
					}
					else
					{
						var item: Object = new Object();
						item = ({
							premise: 
							implProcessor.getAttrSetAsString(implProcessor.fromBitSetToAttributeSet(bsPremise, attributes), attributes), 
							conclusion:
							implProcessor.getAttrSetAsString(implProcessor.fromBitSetToAttributeSet(implProcessor.getBitSetDifference(bsPremise, bsConclusion), attributes), attributes)
						});
						//var nrObjects: int = getNrOfObjects(item.premise, item.conclusion);
						var itemToAdd: Object = new Object();
						itemToAdd = ({							
							objects:
							getNrOfObjects(item.premise, item.conclusion),
							premise: 
							item.premise, 
							conclusion:
							item.conclusion
						});
						///////////////////////////////////////if (bsPremise[j] bsConclusion[j]) {}
						//if (contable[Latin America][Caribbean].){}
						implications.addItem(itemToAdd);
					}		
				}
				//private function continueExploreAttr(all: Boolean): Boolean
				//private function createAttributeColumn(attrIndex:String, attr:String): void
				
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				
				panel.cButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						PopUpManager.removePopUp(panel);
					});
				panel.setImplItems(implications);
				
			}
			
			private function getNrOfObjects(premise: String, conclusion: String): int
			{
				//tokenizing the premises and concusions
				var p:Array = premise.split(",").map(
					function(s:String, i:int, o:Array): String {
						return mx.utils.StringUtil.trim(s);
					});
				var c:Array = conclusion.split(",").map(
					function(s:String, i:int, o:Array): String {
						return mx.utils.StringUtil.trim(s);
					});
				var valuesArray:Array = new Array();
				var i: int = 0;
				var j: int = 0;
				var commonObjects: int = 0;
				
				for (i=1;i<contable.columns.length;i++) {
					for (j=0;j<p.length;j++)
						if (p[j]==contable.columns[i].headerText)
							//retain the i in an array so that we have all the attributes that we need to check
							valuesArray.push(i-1);//we count from 0, not 1, that's why we make -1
					
					for (j=0;j<c.length;j++)
						if (c[j]==contable.columns[i].headerText)
							//retain the i in an array so that we have all the attributes that we need to check
							valuesArray.push(i-1);//we count from 0, not 1, that's why we make -1
					
				}
				//we verify the nr of common objects
				for (i=0;i<contable.dataProvider.length;i++){
					//we assume that the object contable.dataProvider[i] is common
					var common: Boolean = true;
					for (j=0;j<valuesArray.length;j++)
						if (contable.dataProvider[i][valuesArray[j]]==false)
							common=false;
					if (common==true) commonObjects ++;
				}
				
				return commonObjects;
			}

			private var explorer: AttributeExplorer = new AttributeExplorer();
			private var kExplore: int = 1; // step
			private var kClosure: Array = new Array();
			
			private function showEndExploreAttr(): void
			{
				CursorManager.removeAllCursors();
				var panel:ExplorationFinishedPanel = new ExplorationFinishedPanel();
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				
				panel.okButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function yesExplore(all: Boolean): void {
					++kExplore; // increase k and add the implication to the set
					// since we don't need the set, we don't add it anywhere
					
					// continue exploring
					beginExploreAttr(all);
				};
				
			private function showContinueExploreAttr(implic: String): void
			{
				var panel:ExplorationPanel = new ExplorationPanel();
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				panel.lblImplication.htmlText = implic;
				
				var yes:Function = function (event:Event): void {
					PopUpManager.removePopUp(panel);
					yesExplore(false);
				};
				
				var yesToAll:Function = function (event:Event): void {
					PopUpManager.removePopUp(panel);
					yesExplore(true);
				};
				
				var no:Function = function (event:Event): void {
					PopUpManager.removePopUp(panel);
					showAddObject();
				};
				panel.yesButton.addEventListener(MouseEvent.CLICK, yes);
				panel.yesToAllButton.addEventListener(MouseEvent.CLICK, yesToAll);
				panel.noButton.addEventListener(MouseEvent.CLICK, no);
				panel.cancelButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						PopUpManager.removePopUp(panel);
						endExploreAttr();
					});
			}
			
			private function beginExploreAttr(all: Boolean): void
			{
				endExploreAttrButton.enabled = true;
				beginExploreAttrButton.label = "Continue Attribute Exploration";
				if (!continueExploreAttr(all)) // finished
				{
					showEndExploreAttr();
					endExploreAttr();
				}
			}
			
			private function endExploreAttr(): void
			{
				endExploreAttrButton.enabled = false;
				beginExploreAttrButton.label = "Begin Attribute Exploration";
				kExplore = 1;
				kClosure = new Array();
				explorer = new AttributeExplorer();
			}
			
			private function continueExploreAttr(all: Boolean): Boolean
			{
				var i: int = 0;
				
				if (kExplore  == 1)
				{
					 var kClosureFirstTemp: Array = explorer.FirstClosure(objects, attributes, rows);
					 kClosure = new Array();
					 for each (var bFirst: Boolean in kClosureFirstTemp)
					 {
					 	kClosure.push(bFirst);
					 }
				}
				else
				{
					var kClosureNextTemp: Array = explorer.NextClosure(kClosure, objects, attributes, rows);
					kClosure = new Array();
					for each (var bNext: Boolean in kClosureNextTemp)
					{
						kClosure.push(bNext);
					}	
				}
									
				// check whether we've reached the end of the possible intents
				for (i = 0; i < kClosure.length; ++i)
				{
					if (kClosure[i] == false)
					{
						break;
					}
				}
				if (i == kClosure.length)
				{
					return false;
				}
				
				var bsPremise:Array = explorer.sPremise[explorer.sPremise.length - 1];
				var bsConclusion:Array = explorer.sConclusion[explorer.sConclusion.length - 1];
				
				var j: int = 0;
				for (j = 0; j < kClosure.length; ++j)
				{
					if (bsPremise[j] != bsConclusion[j])
					{
						break;
					}
				}
				if (j == bsPremise.length) // premise is equal to the conclusion
				{
					yesExplore(all); // skip
				}
				else
				{
					if (all==false) 
					{
						showContinueExploreAttr("When object(s) have " + 
							explorer.getAttrSetAsString(
								explorer.fromBitSetToAttributeSet(
									bsPremise, 
									attributes), 
								attributes) + " attributes, object(s) also have " + 
							explorer.getAttrSetAsString(
								explorer.fromBitSetToAttributeSet(
									explorer.getBitSetDifference(
										bsPremise, 
										bsConclusion), 
									attributes), 
								attributes) + " attributes?");
					}
					else 
					{
						CursorManager.setBusyCursor();
						continueExploreAttr(true);//yes to all pressed
					}
				}		
						
				return true;
			}
						
			private function createAttributeColumn(attrIndex:String, attr:String): void
			{
				var newColumn:DataGridColumn = new DataGridColumn();
				newColumn.dataField = attrIndex;
				newColumn.headerText = attr;
				newColumn.sortable = false;
				newColumn.editable = false;
				newColumn.draggable = false;
				newColumn.itemRenderer = new ClassFactory(components.CenteredCheckBox);
				cols.push(newColumn);
			}
			
			private function createObject(name:String): Array
			{
				var newObject:Array = new Array();
				newObject["objectName"] = name;
				objects.push(name);
				for (var attrIndex:String in attributes)
					newObject[attrIndex] = false;
				return newObject;
			}
			
			private function setGrid(objects:Array, attributes:Array, rows:ArrayCollection = null): void
			{
				this.attributes = attributes;
				if (rows == null)
				{
					this.rows = rows = new ArrayCollection()
					this.objects.length = 0;
					for each (var object:String in objects) {
						rows.addItem(createObject(object));			
					}
				}
				else
				{
					this.rows = rows;
					this.objects = new Array();
					for each (var object2: String in objects)
					{
						this.objects.push(object2);	
					}
					for (var row:String in rows) {
						rows[row]["objectName"] = objects[row];			
					}
				}
				var objectColumn:DataGridColumn = new DataGridColumn();
				objectColumn.headerText = "";
				objectColumn.dataField = "objectName";
				objectColumn.sortable = false;
				objectColumn.draggable = false;
				objectColumn.rendererIsEditor = true;
				
				cols = new Array();
				cols.push(objectColumn);	
				
				for (var attrIndex:String in attributes) {
					createAttributeColumn(attrIndex, attributes[attrIndex]);
				}
				var emptyCol:DataGridColumn = new DataGridColumn("");
				emptyCol.editable = false;
				emptyCol.draggable = false;
				emptyCol.sortable = false;
				emptyCol.width = 0;
				cols.push(emptyCol);
				if (contable != null)
				{
					contable.columns = cols;
				}
			}
			
			private function setGridBySize(objectCount: int, attributeCount: int): void
			{	
				var objects:Array = new Array();
				for (var i:int = 0; i < objectCount; ++i) {
					objects.push("obj"+i.toString());
				}
				var attributes:Array = new Array();
				for (i = 0; i < attributeCount; ++i) {
					attributes.push("attr"+i.toString());
				}
				setGrid(objects, attributes);
			}
			
			private function createContext(event:NewContextEvent): void
			{
				if (event.data == null) {
					setGrid(event.objects, event.attributes);
					setContextGridVisibility();					
				} else {
					loadData(event.data);
				}
			}
			
			private function showCreateContext(): void
			{
				unsetVisibility();
				viewStack.selectedChild = newContextPanel;
			}
			
			private function unsetVisibility(): void
			{
				//this was initially, but due to a SDK problem causing a bug, was replaced
				//viewStack must be changed BEFORE calling this function
				/*for each (var child:UIComponent in appControlBar.getChildren())
				{
					child.includeInLayout = false;
					child.visible = false;
				}*/
				
				if (viewStack.selectedChild == contextCanvas) {
					infoLabel.visible = false;
					infoLabel.includeInLayout = false;
					backButton.visible = false;
					backButton.includeInLayout = false;
					freePositioningButton.visible = false;
					freePositioningButton.includeInLayout = false;

					newContextButton.includeInLayout = true;
					newContextButton.visible = true;
					viewLatticeButton.includeInLayout = true;
					viewLatticeButton.visible = true;
					viewImplicationsButton.includeInLayout = true;
					viewImplicationsButton.visible = true;
				}
				
				if (viewStack.selectedChild == lattice) {
					newContextButton.visible = false;
					newContextButton.includeInLayout = false;
					viewLatticeButton.visible = false;
					viewLatticeButton.includeInLayout = false;
					viewImplicationsButton.visible = false;
					viewImplicationsButton.includeInLayout = false;
					
					infoLabel.includeInLayout = true;
					infoLabel.visible = true;
					backButton.includeInLayout = true;
					backButton.visible = true;
					freePositioningButton.includeInLayout = true;
					freePositioningButton.visible = true;
				}
				
				openButton.includeInLayout = true;
				openButton.visible = true;
				saveButton.includeInLayout = true;
				saveButton.visible = true;
			}
			
			private function backToContextHandler(): void
			{
				disableFreePositioning();
				setContextGridVisibility();
			}
			
			private function setContextGridVisibility(): void
			{
				viewStack.selectedChild = contextCanvas;
				unsetVisibility();
				
				//viewLatticeButton.visible = true;
				//viewLatticeButton.includeInLayout = true;
				//viewImplicationsButton.visible = true;
				//viewImplicationsButton.includeInLayout = true;
				//newContextButton.visible = true;
				//newContextButton.includeInLayout = true;
			}
			
			private function cancelCreateContext(): void
			{
				setContextGridVisibility();
			}
			
			private function showLattice(): void
			{
				if (rows.length > 0)
				{
					lattice.setContext(objects, attributes, rows);
				}
				setLatticeVisibility();
			}
			
			private function setLatticeVisibility(): void
			{
				viewStack.selectedChild = lattice;
				unsetVisibility();
				
				//backButton.includeInLayout = true;
				//backButton.visible = true;
				//freePositioningButton.includeInLayout=true;
				//freePositioningButton.visible=true;
				//infoLabel.includeInLayout=true;
				//infoLabel.visible=true;	
			}
			
			
			private function showAddObject(): void
			{
				var panel:AddObjectPanel = new AddObjectPanel();
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				panel.textInput.setFocus();
				var addObject:Function = function (event:Event): void {
						rows.addItem(createObject(panel.textInput.text));
						PopUpManager.removePopUp(panel);
					};
				panel.okButton.addEventListener(MouseEvent.CLICK, addObject);
				panel.textInput.addEventListener(FlexEvent.ENTER, addObject);
				panel.cancelButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function popObject(): void
			{
				if (objects.length > 0)
				{
					rows.removeItemAt(rows.length-1);
					objects.pop();
				}
			}
			
			private function popAttribute(): void
			{
				if (attributes.length > 0)
				{
					var emptyColumn:Object = cols.pop();
					cols.pop();
					cols.push(emptyColumn);
					contable.columns = cols;
					attributes.pop();
				}
			}
			
			private function showAddAttribute(): void
			{
				var panel:AddAttributePanel = new AddAttributePanel();
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				panel.textInput.setFocus();
				var addAttribute:Function = function (event:Event): void {
						for each (var row:Array in rows)
						{
							row[panel.textInput.text] = false;
						}
						var emptyColumn:Object = cols.pop();
						var newId:String = (cols.length-1).toString();
						createAttributeColumn(newId, panel.textInput.text);
						cols.push(emptyColumn);
						contable.columns = cols;
						PopUpManager.removePopUp(panel);
					};
				panel.okButton.addEventListener(MouseEvent.CLICK, addAttribute);
				panel.textInput.addEventListener(FlexEvent.ENTER, addAttribute);
				panel.cancelButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function onFileSelect(event:Event): void
			{
				fileReference.addEventListener(Event.COMPLETE, onFileComplete);
				cursorManager.setBusyCursor();
				fileReference.load();
			}
			
			private function loadData(data:String): void
			{
				var lines:Array = data.split("\n");
				if (lines.length==2) {
					unsetVisibility();
					newContextPanel.visible=true;
					//resetButton.visible=false;
					//viewLatticeButton.visible=false;
					//backToGridButton.visible=false;
					//positioningButton.visible=false;
					//infoLabel.visible=false;
					//viewImplicationsButton.visible=false;
					if ((lines[0] as String)=="" || (lines[1] as String)=="") {
						newContextPanel.createButton.enabled=false;
						if ((lines[1] as String)=="")
							newContextPanel.attributesTextInput.setFocus();
						if ((lines[0] as String)=="")
							newContextPanel.objectsTextInput.setFocus();
					}
					else
						newContextPanel.createButton.enabled=true;
					viewStack.selectedChild=newContextPanel;
					newContextPanel.objectsTextInput.text=lines[0] as String;
					newContextPanel.attributesTextInput.text=lines[1] as String;
					cursorManager.removeBusyCursor();
				} else {
					var header:Array = (lines[0] as String).split(" ");
					var objectCount:int = parseInt(header[0]);
					var attributeCount:int = parseInt(header[1]);
					var conceptCount:int = parseInt(header[2]);
					var edgeCount:int = parseInt(header[3]);
					
					attributes = new Array();
					objects = new Array();
					var lineIndex:int = 1;
					for (var oIndex:int = 0; oIndex < objectCount; ++oIndex) 
					{
						objects.push(StringUtil.trim(lines[lineIndex++]));
					}
					for (var aIndex:int = 0; aIndex < attributeCount; ++aIndex) 
					{
						attributes.push(StringUtil.trim(lines[lineIndex++]));
					}
					rows = new ArrayCollection();
					for (var rIndex:int = 0; rIndex < objectCount; ++rIndex)
					{
						var newRow:Array = new Array();
						for each (var c:String in StringUtil.trim(lines[lineIndex]).split(""))
						{
							newRow.push(new Boolean(c == "1"));
						}
						if (objects.length < 100)
						{
							rows.addItem(newRow);
						}
						lineIndex++;
					}
	
					var iMem: int = System.totalMemory / (1024 * 1024); // in MB
					var g:Graph = new Graph();
					var concepts:Array = new Array();
					var nodesPositions:Array = null;
					for (var nIndex:int = 0; nIndex < conceptCount; ++nIndex)
					{
						var conceptLine:String = StringUtil.trim(lines[lineIndex++]);
						var conceptNode:Array = conceptLine.split(",");
						var conceptId:String = conceptNode[0];
						if (nodesPositions==null) 
							nodesPositions = new Array();
						//nodesPositions = new Array();
						//this means that the node was visible and it adds it's position for processing
						if (conceptNode[1]!="0" && conceptNode[2]!="0")
							nodesPositions[nodesPositions.length]=new String(conceptLine);
						//var nx:Number = conceptNode[1];
						//var ny:Number = conceptNode[2];
						var newConcept:Concept = new Concept(null, null, lines[lineIndex], lines[lineIndex + 1]);
						concepts[conceptId] = newConcept;
						var cItem:ConceptItem = new ConceptItem(conceptId, -1, -1, lines[lineIndex + 1], lines[lineIndex]);
						lineIndex += 2;
						var attachedIdObject: String = StringUtil.trim(lines[lineIndex++]);
						var attachedIdAttribute: String = StringUtil.trim(lines[lineIndex++]);
						if (attachedIdObject != "")
						{
							cItem.attachedObject = objects[attachedIdObject];
						}
						if (attachedIdAttribute != "")
						{
							cItem.attachedAttribute = attributes[attachedIdAttribute];
						}
						g.add(cItem);
					}
					lattice.setNodesPositions(nodesPositions);
					iMem = System.totalMemory / (1024 * 1024); // in MB
					for (var eIndex:int = 0; eIndex < edgeCount; ++eIndex)
					{
						var edge:Array = StringUtil.trim(lines[lineIndex++]).split(" ");
						g.link(g.nodes[edge[0]], g.nodes[edge[1]], edge[0]);
					}
					var settingsData:String = new String();
					//loads settings for lattice view window, we must keep functionality 
					//with saves that does not include the view settings
					if (lineIndex!=lines.length) {
						while (lineIndex!=lines.length)
							settingsData+=lines[lineIndex++]+"\n";
						lattice.setLatticeViewSettings(settingsData);
					}
					
					iMem = System.totalMemory / (1024 * 1024); // in MB
					trace("Total used memory for " + conceptCount + " concepts and " + edgeCount + " edges: " + (System.totalMemory / (1024 * 1024)).toString() + " MB."); // in MB
					if (concepts.length > 0) {
						lattice.setGraph(objects, attributes, g);
						lattice.setConcepts(concepts);
						if (objects.length < 100)
						{
							setGrid(objects, attributes, rows);
						} 
						setLatticeVisibility(); 
					} else {
						setGrid(objects, attributes, rows);
						setContextGridVisibility(); 
					}
					lattice.loadNodesPositions();
					cursorManager.removeBusyCursor();
				}
			}
			
			private function onFileComplete(event:Event): void
			{
				loadData(fileReference.data.toString());
			}
			
			private function openClickHandler():void
			{
				//var confexploreFilter:FileFilter = new FileFilter("Conflexplore files (*.con)", "*.con;*.lat;*.cont;*.conf;*.latt;*.lattice;*.context");
				var confexploreFilter:FileFilter = new FileFilter("Conflexplore files (*.con)", "*.con");
				var allFilter:FileFilter = new FileFilter("All", "*.*");
				fileReference.browse([confexploreFilter,allFilter]);
				fileReference.addEventListener(Event.SELECT, onFileSelect);
			}
			
			private function saveClickHandler():void
			{
				if (viewStack.selectedChild == lattice)
					exportLatticeImage();
				if (viewStack.selectedChild == contextCanvas)
					exportContextImage();
				if (viewStack.selectedChild == newContextPanel)
					exportInitialContextImage();
			}
			
			private function conSave():void
			{
				//newContextPanel.initialContext;
				var fileReference:FileReference = new FileReference();
				var out:ByteArray = new ByteArray();
				out.writeUTFBytes(objects.length + " " + attributes.length + " " + 
					lattice.getConcepts().length + " " + lattice.getGraph().edges.length + "\n");
				out.writeUTFBytes(objects.join("\n")+"\n");
				out.writeUTFBytes(attributes.join("\n")+"\n");
				for each (var row:Array in rows)
				{
					for (var attributeIndex:String in attributes)
					{
						if (row[attributeIndex])
						{
							out.writeUTFBytes("1");
						}
						else
						{
							out.writeUTFBytes("0");
						}
					}
					out.writeUTFBytes("\n"); 
				}
				out.writeUTFBytes(lattice.getConceptRepresentation());
				out.writeUTFBytes(lattice.getGraphRepresentation());
				//if (viewStack.selectedChild == contextCanvas)
				//	fileReference.save(out, "context.con");
				if (viewStack.selectedChild == lattice) {
					//save viewing setting so at load, the lattice will be identical
					out.writeUTFBytes(lattice.maxDistanceFromCurrent.value + "\n");
					out.writeUTFBytes(lattice.maxVisible.value + "\n");
					out.writeUTFBytes(lattice.widthSlider.value + "\n");
					out.writeUTFBytes(lattice.heightSlider.value + "\n");
					out.writeUTFBytes(lattice.fontSizeSlider.value + "\n");
					out.writeUTFBytes(lattice.skipCount.value + "\n");
					out.writeUTFBytes(lattice.repulsionSlider.value + "\n");
					out.writeUTFBytes(lattice.verticalRepulsionSlider.value + "\n");
					if (lattice.s.freeNodePositioning==true)
						out.writeUTFBytes("0" + "\n");
					if (lattice.s.freeNodePositioning==false)
						out.writeUTFBytes("1" + "\n");
					fileReference.save(out, "lattice.con");
				}
				if (viewStack.selectedChild == contextCanvas)
					fileReference.save(out, "context.con");
				if (viewStack.selectedChild == newContextPanel) {
					out.clear();
					//for (var i:int=0;i<newContextPanel.objectsTextInput.text.length;i++)
					//	out.writeByte(newContextPanel.objectsTextInput.text.charCodeAt(i));
					out.writeUTFBytes(newContextPanel.objectsTextInput.text);
					out.writeUTFBytes("\n");
					out.writeUTFBytes(newContextPanel.attributesTextInput.text);
					fileReference.save(out, "context.con");
				}
			}
	
			private function onMyCustomEvent1(event:Event):void {
				//mx.controls.Alert.show('I heard that!');
				CursorManager.setBusyCursor();
			}
			
			private function onMyCustomEvent2(event:Event):void {
				//mx.controls.Alert.show('I heard that!');
				lattice.s.height=1000;
				lattice.s.width=1000;
			}
			private function onMyCustomEvent3(event:Event):void {
				//mx.controls.Alert.show('I heard that!');
				//CursorManager.setBusyCursor();
				var bd:BitmapData = new BitmapData(lattice.s.width, lattice.s.height);
				bd.draw(lattice.s);
				var ba:ByteArray = (new JPEGEncoder(100)).encode(bd);
				var fr:FileReference = new FileReference();
				fr.save(ba, "lattice.jpg");
				CursorManager.removeBusyCursor();
			}
			
			private function exportLatticeImage(): void
			{	
				var panel:SavePanel = new SavePanel();
				panel.title="Save lattice";
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				//moving lattice to left-reminescence from the time when lattice was created on the middle of the window
				var oldXAxisLatticePosition: int = lattice.s.doPositionLattice();
				var latticeRectangle: Rectangle = lattice.s.calcItemsBoundingRect();
				lattice.s.width=latticeRectangle.right+11;
				lattice.s.height=latticeRectangle.bottom+5;
				
				var bd:BitmapData = new BitmapData(lattice.s.width, lattice.s.height);
				var fr:FileReference = new FileReference();
				var jpgEnc:JPEGEncoder = new JPEGEncoder(100);
				var pngEnc:PNGEncoder = new PNGEncoder();
				
				panel.dataButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						conSave();
						lattice.s.percentWidth=100;
						lattice.s.percentHeight=100;
						lattice.s.doPositionLatticeXAxis(oldXAxisLatticePosition);
						PopUpManager.removePopUp(panel);
					});
				panel.jpgButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(lattice.s);
						var ba:ByteArray = jpgEnc.encode(bd);
						fr.save(ba, "lattice.jpg");
						lattice.s.percentWidth=100;
						lattice.s.percentHeight=100;
						lattice.s.doPositionLatticeXAxis(oldXAxisLatticePosition);
						PopUpManager.removePopUp(panel);
					});
				
				panel.pngButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(lattice.s);
						var ba:ByteArray = pngEnc.encode(bd);
						fr.save(ba, "lattice.png");
						lattice.s.percentWidth=100;
						lattice.s.percentHeight=100;
						lattice.s.doPositionLatticeXAxis(oldXAxisLatticePosition);
						PopUpManager.removePopUp(panel);
					});
				
				panel.cButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						lattice.s.percentWidth=100;
						lattice.s.percentHeight=100;
						lattice.s.doPositionLatticeXAxis(oldXAxisLatticePosition);
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function exportContextImage(): void
			{	
				var panel:SavePanel = new SavePanel();
				panel.title="Save context";
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				
				//var w:int = contable.width;
				//var h:int = contable.height;
				contable.height=contable.measureHeightOfItems(0, contable.dataProvider.length+1) + contable.headerHeight;
				var cWidth:int=0;
				for (var c:int=0;c<contable.columnCount-1;c++)
					cWidth+=contable.columns[c].width;
				contable.width=cWidth+27;//contable.columns[1].width;
				
				var bd:BitmapData = new BitmapData(contable.width-27, contable.height-5);
				var fr:FileReference = new FileReference();
				var jpgEnc:JPEGEncoder = new JPEGEncoder(100);
				var pngEnc:PNGEncoder = new PNGEncoder();
				
				panel.dataButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						conSave();
						contable.percentWidth=100;
						contable.percentHeight=100;
						PopUpManager.removePopUp(panel);
					});
				panel.jpgButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(contable);
						var ba:ByteArray = jpgEnc.encode(bd);
						fr.save(ba, "context.jpg");
						contable.percentWidth=100;
						contable.percentHeight=100;
						PopUpManager.removePopUp(panel);
					});
				
				panel.pngButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(contable);
						var ba:ByteArray = pngEnc.encode(bd);
						fr.save(ba, "context.png");
						contable.percentWidth=100;
						contable.percentHeight=100;
						PopUpManager.removePopUp(panel);
					});
				
				panel.cButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						contable.percentWidth=100;
						contable.percentHeight=100;
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function exportInitialContextImage(): void
			{	
				var panel:SavePanel = new SavePanel();
				panel.title="Save context";
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				
				newContextPanel.objectsTextInput.validateNow();
				newContextPanel.attributesTextInput.validateNow();
				var textWidth:int = newContextPanel.objectsTextInput.textWidth;
				if (newContextPanel.objectsTextInput.textWidth<newContextPanel.attributesTextInput.textWidth)
					textWidth = newContextPanel.attributesTextInput.textWidth;
				newContextPanel.initialContext.width = textWidth + 170;
				
				var bd:BitmapData = new BitmapData(newContextPanel.initialContext.width, newContextPanel.initialContext.height);
				var fr:FileReference = new FileReference();
				var jpgEnc:JPEGEncoder = new JPEGEncoder(100);
				var pngEnc:PNGEncoder = new PNGEncoder();
				
				panel.dataButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						conSave();
						newContextPanel.initialContext.width=487;
						PopUpManager.removePopUp(panel);
					});
				panel.jpgButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(newContextPanel.initialContext);
						var ba:ByteArray = jpgEnc.encode(bd);
						fr.save(ba, "context.jpg");
						newContextPanel.initialContext.width=487;
						PopUpManager.removePopUp(panel);
					});
				
				panel.pngButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						bd.draw(newContextPanel.initialContext);
						var ba:ByteArray = pngEnc.encode(bd);
						fr.save(ba, "context.png");
						newContextPanel.initialContext.width=487;
						PopUpManager.removePopUp(panel);
					});
				
				panel.cButton.addEventListener(MouseEvent.CLICK,
					function (event:Event): void {
						newContextPanel.initialContext.width=487;
						PopUpManager.removePopUp(panel);
					});
			}
			
			private function positioningHandler():void
			{
				if (freePositioningButton.label=="Enable free positioning") enableFreePositioning();
				else disableFreePositioning();
			}
			
			private function disableLatticeControls():void
			{
				lattice.maxDistanceFromCurrent.enabled=false;
				lattice.maxVisible.enabled=false;
				lattice.widthSlider.enabled=false;
				lattice.heightSlider.enabled=false;
				lattice.fontSizeSlider.enabled=false;
				lattice.skipCount.enabled=false;
				lattice.repulsionSlider.enabled=false;
				lattice.verticalRepulsionSlider.enabled=false;
			}
			
			private function enableLatticeControls():void
			{
				lattice.maxDistanceFromCurrent.enabled=true;
				lattice.maxVisible.enabled=true;
				lattice.widthSlider.enabled=true;
				lattice.heightSlider.enabled=true;
				lattice.fontSizeSlider.enabled=true;
				lattice.skipCount.enabled=true;
				lattice.repulsionSlider.enabled=true;
				lattice.verticalRepulsionSlider.enabled=true;
			}
			
			public function enableFreePositioning():void {
				freePositioningButton.label="Disable free positioning";
				infoLabel.text="Free node positioning enabled";
				infoLabel.visible=true;
				lattice.s.freeNodePositioning = true;
				disableLatticeControls();
			}
			
			public function disableFreePositioning():void {
				freePositioningButton.label="Enable free positioning";
				infoLabel.text="Free node positioning disabled";
				infoLabel.visible=true;
				lattice.s.freeNodePositioning = false;
				enableLatticeControls();
			}
			
		]]>
	</mx:Script>
	
	<mx:ApplicationControlBar id="appControlBar" width="100%">
			<mx:Button id="openButton" visible="true" includeInLayout="true" click="openClickHandler()" label="Open"/>
			<mx:Button id="saveButton" visible="true" includeInLayout="true" click="saveClickHandler()" label="Save"/>
			<mx:Button id="newContextButton" visible="false" includeInLayout="false" label="New Context" click="showCreateContext()" showEffect="{fadeIn}" hideEffect="{fadeOut}"/>
			<mx:Button id="viewLatticeButton" visible="false" includeInLayout="false" label="View Lattice" click="showLattice()" showEffect="{fadeIn}" hideEffect="{fadeOut}"/>
			<mx:Button id="backButton" visible="false" includeInLayout="false" label="Back" click="backToContextHandler()" showEffect="{fadeIn}" hideEffect="{fadeOut}"/>
			<mx:Button id="viewImplicationsButton" visible="false" includeInLayout="false" label="View Implications" click="showImplications()" showEffect="{fadeIn}" hideEffect="{fadeOut}"/>
			<mx:Button id="freePositioningButton" visible="false" includeInLayout="false" click="positioningHandler()" label="Enable free positioning" showEffect="{fadeIn}" hideEffect="{fadeOut}"/>
			<mx:Label id="infoLabel" text="Free node positioning disabled" color="#ffffff" textAlign="left" visible="false" fontWeight="bold" showEffect="{fadeIn}" hideEffect="{fadeOut}" />
	</mx:ApplicationControlBar>

	<mx:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0"/>
	<mx:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0"/>
	<mx:ViewStack id="viewStack" width="100%" height="100%">
		<components:NewContextPanel
			id="newContextPanel"
			showEffect="{fadeIn}"
			hideEffect="{fadeOut}" 
			createContextClick="createContext(event)"
			cancelCreateContextClick="cancelCreateContext()" />
		<mx:VBox id="contextCanvas" width="100%"  height="100%"
				 horizontalScrollPolicy="off"
				 verticalScrollPolicy="off"
				 paddingTop="5"
				 showEffect="{fadeIn}"
				 hideEffect="{fadeOut}">
			<mx:HBox>
				<mx:Button label="Add Object" click="showAddObject()"/>
				<mx:Button label="Pop Object" click="popObject()"/>
				<mx:Button label="Add Attribute" click="showAddAttribute()"/>
				<mx:Button label="Pop Attribute" click="popAttribute()"/>
				<mx:Button label="Begin Attribute Exploration" id="beginExploreAttrButton" click="beginExploreAttr(false)"/>
				<mx:Button label="Cancel Attribute Exploration" id="endExploreAttrButton" enabled="false" click="endExploreAttr()"/>
			</mx:HBox>
			<mx:DataGrid lockedColumnCount="1" creationComplete="initGrid()" id="contable"
						 horizontalScrollPolicy="auto"
						 verticalScrollPolicy="auto"
						 variableRowHeight="true"
						 width="100%" height="100%"
						 dataProvider="{rows}" editable="true">
			</mx:DataGrid>
		</mx:VBox>
		
		<components:LatticeView id="lattice" width="100%" height="100%"
								showEffect="{fadeIn}"
								hideEffect="{fadeOut}" />
	</mx:ViewStack>
</mx:VBox>
